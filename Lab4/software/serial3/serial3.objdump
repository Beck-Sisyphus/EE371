
serial3.elf:     file format elf32-littlenios2
serial3.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000850 memsz 0x00000850 flags r-x
    LOAD off    0x00001870 vaddr 0x00000870 paddr 0x000008e4 align 2**12
         filesz 0x00000074 memsz 0x00000074 flags rw-
    LOAD off    0x00001958 vaddr 0x00000958 paddr 0x00000958 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  000018e4  2**0
                  CONTENTS
  2 .text         00000838  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  00000858  00000858  00001858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000074  00000870  000008e4  00001870  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00000958  00000958  00001958  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_mem   00000000  00000968  00000968  000018e4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000018e4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000002a0  00000000  00000000  00001908  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000020ba  00000000  00000000  00001ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000ed0  00000000  00000000  00003c62  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00000f20  00000000  00000000  00004b32  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000398  00000000  00000000  00005a54  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000aac  00000000  00000000  00005dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000807  00000000  00000000  00006898  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  000070a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000b8  00000000  00000000  000070e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000829d  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000082a0  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000082a3  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000082a4  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  000082a5  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  000082ae  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  000082b7  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000007  00000000  00000000  000082c0  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000042  00000000  00000000  000082c7  2**0
                  CONTENTS, READONLY
 26 .jdi          00003615  00000000  00000000  00008309  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0005352f  00000000  00000000  0000b91e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
00000858 l    d  .rodata	00000000 .rodata
00000870 l    d  .rwdata	00000000 .rwdata
00000958 l    d  .bss	00000000 .bss
00000968 l    d  .onchip_mem	00000000 .onchip_mem
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../serial3_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_fcntl.c
00000000 l    df *ABS*	00000000 alt_getchar.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000006f0 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000704 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
000003cc g     F .text	0000002c alt_main
000008e4 g       *ABS*	00000000 __flash_rwdata_start
000008c8 g     O .rwdata	00000004 jtag_uart
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000964 g     O .bss	00000004 errno
0000095c g     O .bss	00000004 alt_argv
000088c8 g       *ABS*	00000000 _gp
000005ac g     F .text	00000004 usleep
00000870 g     O .rwdata	00000030 alt_fd_list
0000005c g     F .text	00000060 writeToSerial
000005d4 g     F .text	0000005c altera_avalon_jtag_uart_read
00000820 g     F .text	00000008 .hidden __udivsi3
000008cc g     O .rwdata	00000004 alt_max_fd
00000968 g       *ABS*	00000000 __bss_end
00000290 g     F .text	00000044 alt_getchar
00000000 g       *ABS*	00000000 __alt_mem_onchip_mem
000008a0 g     O .rwdata	00000028 alt_dev_null
000006ec g     F .text	00000004 alt_dcache_flush_all
000008e4 g       *ABS*	00000000 __ram_rwdata_end
000008d0 g     O .rwdata	00000008 alt_dev_list
00000870 g       *ABS*	00000000 __ram_rodata_end
00000828 g     F .text	00000008 .hidden __umodsi3
00000968 g       *ABS*	00000000 end
00004000 g       *ABS*	00000000 __alt_stack_pointer
00000630 g     F .text	00000034 altera_avalon_jtag_uart_write
000003f8 g     F .text	0000016c alt_printf
00000020 g     F .text	0000003c _start
000005d0 g     F .text	00000004 alt_sys_init
00000830 g     F .text	00000028 .hidden __mulsi3
00000870 g       *ABS*	00000000 __ram_rwdata_start
00000858 g       *ABS*	00000000 __ram_rodata_start
00000664 g     F .text	00000088 alt_busy_sleep
00000968 g       *ABS*	00000000 __alt_stack_base
00000958 g       *ABS*	00000000 __bss_start
000000bc g     F .text	000000b0 main
00000958 g     O .bss	00000004 alt_envp
000008e0 g     O .rwdata	00000004 alt_errno
00000770 g     F .text	00000054 .hidden __divsi3
00000858 g       *ABS*	00000000 __flash_rodata_start
000005b0 g     F .text	00000020 alt_irq_init
00000960 g     O .bss	00000004 alt_argc
000008d8 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
000008e4 g       *ABS*	00000000 _edata
00000968 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
000006fc g     F .text	00000008 altera_nios2_qsys_irq_init
000007c4 g     F .text	0000005c .hidden __modsi3
00004000 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit
00000564 g     F .text	00000048 alt_putchar
000006f8 g     F .text	00000004 alt_icache_flush_all
0000016c g     F .text	00000124 fcntl
000002d4 g     F .text	000000f8 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a23214 	ori	gp,gp,35016
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	10825614 	ori	r2,r2,2392

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c25a14 	ori	r3,r3,2408

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_gp+0xffff777c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	00002d40 	call	2d4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	00003cc0 	call	3cc <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <_gp+0xffff7790>

0000005c <writeToSerial>:
#define Character_Received (volatile char *) 0x0003050//	Character_Received, Input to NIOS
#define load (char *) 0x0003060

// Writes given character
void writeToSerial(char command) {
	IOWR_ALTERA_AVALON_PIO_DATA(data_in, command);
  5c:	21003fcc 	andi	r4,r4,255
#define Character_Sent (volatile char *) 0x0003040//  Character_Sent, Input to NIOS
#define Character_Received (volatile char *) 0x0003050//	Character_Received, Input to NIOS
#define load (char *) 0x0003060

// Writes given character
void writeToSerial(char command) {
  60:	defffd04 	addi	sp,sp,-12
	IOWR_ALTERA_AVALON_PIO_DATA(data_in, command);
  64:	2100201c 	xori	r4,r4,128
#define Character_Sent (volatile char *) 0x0003040//  Character_Sent, Input to NIOS
#define Character_Received (volatile char *) 0x0003050//	Character_Received, Input to NIOS
#define load (char *) 0x0003060

// Writes given character
void writeToSerial(char command) {
  68:	dfc00215 	stw	ra,8(sp)
  6c:	dc400115 	stw	r17,4(sp)
  70:	dc000015 	stw	r16,0(sp)
	IOWR_ALTERA_AVALON_PIO_DATA(data_in, command);
  74:	213fe004 	addi	r4,r4,-128
  78:	008c0404 	movi	r2,12304
  7c:	11000035 	stwio	r4,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(load, 1);
  80:	00800044 	movi	r2,1
  84:	044c1804 	movi	r17,12384
  88:	88800035 	stwio	r2,0(r17)
	IOWR_ALTERA_AVALON_PIO_DATA(enable, 1);
  8c:	040c0004 	movi	r16,12288
  90:	80800035 	stwio	r2,0(r16)
	usleep(4);
  94:	01000104 	movi	r4,4
  98:	00005ac0 	call	5ac <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(load, 0);
  9c:	0005883a 	mov	r2,zero
  a0:	88800035 	stwio	r2,0(r17)
	IOWR_ALTERA_AVALON_PIO_DATA(enable, 0);
  a4:	80800035 	stwio	r2,0(r16)
}
  a8:	dfc00217 	ldw	ra,8(sp)
  ac:	dc400117 	ldw	r17,4(sp)
  b0:	dc000017 	ldw	r16,0(sp)
  b4:	dec00304 	addi	sp,sp,12
  b8:	f800283a 	ret

000000bc <main>:

int main()
{
  bc:	defffa04 	addi	sp,sp,-24
	fcntl(STDIN_FILENO, F_SETFL, O_NONBLOCK);
  c0:	0009883a 	mov	r4,zero
  c4:	01400104 	movi	r5,4
  c8:	01900004 	movi	r6,16384
	IOWR_ALTERA_AVALON_PIO_DATA(load, 0);
	IOWR_ALTERA_AVALON_PIO_DATA(enable, 0);
}

int main()
{
  cc:	dd000415 	stw	r20,16(sp)
  d0:	dcc00315 	stw	r19,12(sp)
  d4:	dc800215 	stw	r18,8(sp)
  d8:	dc000015 	stw	r16,0(sp)
  dc:	dfc00515 	stw	ra,20(sp)
  e0:	dc400115 	stw	r17,4(sp)
	fcntl(STDIN_FILENO, F_SETFL, O_NONBLOCK);
  e4:	000016c0 	call	16c <fcntl>

	// char* pBuffer = calloc(BUFFER_SIZE, sizeof(char));
	// char* pBufferHead = pBuffer;
	// char* pTransmit = pBuffer;

	*load = 0;
  e8:	008c1804 	movi	r2,12384
  ec:	10000005 	stb	zero,0(r2)
	*enable = 0;
  f0:	008c0004 	movi	r2,12288
  f4:	10000005 	stb	zero,0(r2)
	*data_in = 0xFF;
  f8:	00ffffc4 	movi	r3,-1
  fc:	008c0404 	movi	r2,12304
 100:	10c00005 	stb	r3,0(r2)

int main()
{
	fcntl(STDIN_FILENO, F_SETFL, O_NONBLOCK);
	// int i;
	 char bufferIn = '0';
 104:	04000c04 	movi	r16,48
	*data_in = 0xFF;

	while (1)
	{
		/* read */
		if (*Character_Received != 0) {
 108:	04cc1404 	movi	r19,12368
			bufferIn = IORD_ALTERA_AVALON_PIO_DATA(data_out);
 10c:	050c0804 	movi	r20,12320
			alt_printf("Reading: %c", bufferIn);
		}
		*leds = bufferIn;
 110:	048c0c04 	movi	r18,12336
	*data_in = 0xFF;

	while (1)
	{
		/* read */
		if (*Character_Received != 0) {
 114:	98800003 	ldbu	r2,0(r19)
 118:	10803fcc 	andi	r2,r2,255
 11c:	1080201c 	xori	r2,r2,128
 120:	10bfe004 	addi	r2,r2,-128
 124:	10000826 	beq	r2,zero,148 <main+0x8c>
			bufferIn = IORD_ALTERA_AVALON_PIO_DATA(data_out);
 128:	a1400037 	ldwio	r5,0(r20)
			alt_printf("Reading: %c", bufferIn);
 12c:	01000034 	movhi	r4,0

	while (1)
	{
		/* read */
		if (*Character_Received != 0) {
			bufferIn = IORD_ALTERA_AVALON_PIO_DATA(data_out);
 130:	2821883a 	mov	r16,r5
			alt_printf("Reading: %c", bufferIn);
 134:	29403fcc 	andi	r5,r5,255
 138:	2940201c 	xori	r5,r5,128
 13c:	21021604 	addi	r4,r4,2136
 140:	297fe004 	addi	r5,r5,-128
 144:	00003f80 	call	3f8 <alt_printf>
		}
		*leds = bufferIn;
 148:	94000005 	stb	r16,0(r18)


		// Write
		char keyboard = alt_getchar();
 14c:	00002900 	call	290 <alt_getchar>
 150:	1023883a 	mov	r17,r2
		alt_getchar();
 154:	00002900 	call	290 <alt_getchar>
		writeToSerial(keyboard);
 158:	89003fcc 	andi	r4,r17,255
 15c:	2100201c 	xori	r4,r4,128
 160:	213fe004 	addi	r4,r4,-128
 164:	000005c0 	call	5c <writeToSerial>
	}
 168:	003fea06 	br	114 <_gp+0xffff784c>

0000016c <fcntl>:
 *
 * ALT_FCNTL is mapped onto the fcntl() system call in alt_syscall.h
 */
 
int ALT_FCNTL (int file, int cmd, ...)
{ 
 16c:	defff904 	addi	sp,sp,-28
 170:	dcc00315 	stw	r19,12(sp)
 174:	2027883a 	mov	r19,r4
 178:	dfc00415 	stw	ra,16(sp)
 17c:	dc800215 	stw	r18,8(sp)
 180:	dc400115 	stw	r17,4(sp)
 184:	dc000015 	stw	r16,0(sp)
 188:	d9800515 	stw	r6,20(sp)
 18c:	d9c00615 	stw	r7,24(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 190:	20002d16 	blt	r4,zero,248 <fcntl+0xdc>
 194:	2823883a 	mov	r17,r5
 198:	04000034 	movhi	r16,0
 19c:	01400304 	movi	r5,12
 1a0:	00008300 	call	830 <__mulsi3>
 1a4:	84021c04 	addi	r16,r16,2160
 1a8:	1407883a 	add	r3,r2,r16
  
  if (fd)
 1ac:	18002626 	beq	r3,zero,248 <fcntl+0xdc>
  {
    switch (cmd)
 1b0:	00c000c4 	movi	r3,3
 1b4:	88c01126 	beq	r17,r3,1fc <fcntl+0x90>
 1b8:	00c00104 	movi	r3,4
 1bc:	88c0181e 	bne	r17,r3,220 <fcntl+0xb4>
      return fd->fd_flags & ~((alt_u32) ALT_FD_FLAGS_MASK);
    case F_SETFL:
      va_start(argp, cmd);
      flags = va_arg(argp, long);
      fd->fd_flags &= ~ALT_FCNTL_FLAGS_MASK;
      fd->fd_flags |= (flags & ALT_FCNTL_FLAGS_MASK);
 1c0:	10800204 	addi	r2,r2,8
 1c4:	80a3883a 	add	r17,r16,r2
 1c8:	d8800517 	ldw	r2,20(sp)
    case F_GETFL:
      return fd->fd_flags & ~((alt_u32) ALT_FD_FLAGS_MASK);
    case F_SETFL:
      va_start(argp, cmd);
      flags = va_arg(argp, long);
      fd->fd_flags &= ~ALT_FCNTL_FLAGS_MASK;
 1cc:	9809883a 	mov	r4,r19
 1d0:	01400304 	movi	r5,12
      fd->fd_flags |= (flags & ALT_FCNTL_FLAGS_MASK);
 1d4:	1490020c 	andi	r18,r2,16392
    case F_GETFL:
      return fd->fd_flags & ~((alt_u32) ALT_FD_FLAGS_MASK);
    case F_SETFL:
      va_start(argp, cmd);
      flags = va_arg(argp, long);
      fd->fd_flags &= ~ALT_FCNTL_FLAGS_MASK;
 1d8:	00008300 	call	830 <__mulsi3>
 1dc:	8085883a 	add	r2,r16,r2
 1e0:	10800217 	ldw	r2,8(r2)
 1e4:	00effdc4 	movi	r3,-16393
 1e8:	10c4703a 	and	r2,r2,r3
      fd->fd_flags |= (flags & ALT_FCNTL_FLAGS_MASK);
 1ec:	9084b03a 	or	r2,r18,r2
 1f0:	88800015 	stw	r2,0(r17)
      va_end(argp);
      return 0;
 1f4:	0005883a 	mov	r2,zero
 1f8:	00001e06 	br	274 <fcntl+0x108>
  if (fd)
  {
    switch (cmd)
    {
    case F_GETFL:
      return fd->fd_flags & ~((alt_u32) ALT_FD_FLAGS_MASK);
 1fc:	9809883a 	mov	r4,r19
 200:	01400304 	movi	r5,12
 204:	00008300 	call	830 <__mulsi3>
 208:	8085883a 	add	r2,r16,r2
 20c:	10c00217 	ldw	r3,8(r2)
 210:	00900034 	movhi	r2,16384
 214:	10bfffc4 	addi	r2,r2,-1
 218:	1884703a 	and	r2,r3,r2
 21c:	00001506 	br	274 <fcntl+0x108>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 220:	00800034 	movhi	r2,0
 224:	10823804 	addi	r2,r2,2272
 228:	10800017 	ldw	r2,0(r2)
 22c:	10000226 	beq	r2,zero,238 <fcntl+0xcc>
 230:	103ee83a 	callr	r2
 234:	00000206 	br	240 <fcntl+0xd4>
 238:	00800034 	movhi	r2,0
 23c:	10825904 	addi	r2,r2,2404
      fd->fd_flags &= ~ALT_FCNTL_FLAGS_MASK;
      fd->fd_flags |= (flags & ALT_FCNTL_FLAGS_MASK);
      va_end(argp);
      return 0;
    default:
      ALT_ERRNO = EINVAL;
 240:	00c00584 	movi	r3,22
 244:	00000906 	br	26c <fcntl+0x100>
 248:	00800034 	movhi	r2,0
 24c:	10823804 	addi	r2,r2,2272
 250:	10800017 	ldw	r2,0(r2)
 254:	10000226 	beq	r2,zero,260 <fcntl+0xf4>
 258:	103ee83a 	callr	r2
 25c:	00000206 	br	268 <fcntl+0xfc>
 260:	00800034 	movhi	r2,0
 264:	10825904 	addi	r2,r2,2404
      return -1;
    }
  }

  ALT_ERRNO = EBADFD;
 268:	00c01444 	movi	r3,81
 26c:	10c00015 	stw	r3,0(r2)
  return -1;
 270:	00bfffc4 	movi	r2,-1
}
 274:	dfc00417 	ldw	ra,16(sp)
 278:	dcc00317 	ldw	r19,12(sp)
 27c:	dc800217 	ldw	r18,8(sp)
 280:	dc400117 	ldw	r17,4(sp)
 284:	dc000017 	ldw	r16,0(sp)
 288:	dec00704 	addi	sp,sp,28
 28c:	f800283a 	ret

00000290 <alt_getchar>:
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
 290:	00800034 	movhi	r2,0
 294:	10821c04 	addi	r2,r2,2160
 298:	11c00217 	ldw	r7,8(r2)
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
 29c:	defffe04 	addi	sp,sp,-8
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
 2a0:	01000034 	movhi	r4,0
 2a4:	21023204 	addi	r4,r4,2248
 2a8:	d80b883a 	mov	r5,sp
 2ac:	01800044 	movi	r6,1
 * Uses the ALT_DRIVER_READ() macro to call directly to driver if available.
 * Otherwise, uses newlib provided getchar() routine.
 */
int 
alt_getchar(void)
{
 2b0:	dfc00115 	stw	ra,4(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
 2b4:	00005d40 	call	5d4 <altera_avalon_jtag_uart_read>
 2b8:	0080020e 	bge	zero,r2,2c4 <alt_getchar+0x34>
        return -1;
    }
    return c;
 2bc:	d8800007 	ldb	r2,0(sp)
 2c0:	00000106 	br	2c8 <alt_getchar+0x38>
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_READ_EXTERNS(ALT_STDIN_DEV);
    char c;

    if (ALT_DRIVER_READ(ALT_STDIN_DEV, &c, 1, alt_fd_list[STDIN_FILENO].fd_flags) <= 0) {
        return -1;
 2c4:	00bfffc4 	movi	r2,-1
    return c;
#else
    return getchar();
#endif
#endif
}
 2c8:	dfc00117 	ldw	ra,4(sp)
 2cc:	dec00204 	addi	sp,sp,8
 2d0:	f800283a 	ret

000002d4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 2d4:	deffff04 	addi	sp,sp,-4
 2d8:	01000034 	movhi	r4,0
 2dc:	01400034 	movhi	r5,0
 2e0:	dfc00015 	stw	ra,0(sp)
 2e4:	21021c04 	addi	r4,r4,2160
 2e8:	29423904 	addi	r5,r5,2276

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 2ec:	2140061e 	bne	r4,r5,308 <alt_load+0x34>
 2f0:	01000034 	movhi	r4,0
 2f4:	01400034 	movhi	r5,0
 2f8:	21000804 	addi	r4,r4,32
 2fc:	29400804 	addi	r5,r5,32
 300:	2140141e 	bne	r4,r5,354 <alt_load+0x80>
 304:	00000d06 	br	33c <alt_load+0x68>
 308:	00c00034 	movhi	r3,0
 30c:	18c23904 	addi	r3,r3,2276
 310:	00bfff04 	movi	r2,-4
 314:	1907c83a 	sub	r3,r3,r4
 318:	1886703a 	and	r3,r3,r2
 31c:	0005883a 	mov	r2,zero
  {
    while( to != end )
 320:	10fff326 	beq	r2,r3,2f0 <_gp+0xffff7a28>
 324:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 328:	39c00017 	ldw	r7,0(r7)
 32c:	110d883a 	add	r6,r2,r4
 330:	10800104 	addi	r2,r2,4
 334:	31c00015 	stw	r7,0(r6)
 338:	003ff906 	br	320 <_gp+0xffff7a58>
 33c:	01000034 	movhi	r4,0
 340:	01400034 	movhi	r5,0
 344:	21021604 	addi	r4,r4,2136
 348:	29421604 	addi	r5,r5,2136

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 34c:	2140121e 	bne	r4,r5,398 <alt_load+0xc4>
 350:	00000d06 	br	388 <alt_load+0xb4>
 354:	00c00034 	movhi	r3,0
 358:	18c00804 	addi	r3,r3,32
 35c:	00bfff04 	movi	r2,-4
 360:	1907c83a 	sub	r3,r3,r4
 364:	1886703a 	and	r3,r3,r2
 368:	0005883a 	mov	r2,zero
  {
    while( to != end )
 36c:	10fff326 	beq	r2,r3,33c <_gp+0xffff7a74>
 370:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 374:	39c00017 	ldw	r7,0(r7)
 378:	110d883a 	add	r6,r2,r4
 37c:	10800104 	addi	r2,r2,4
 380:	31c00015 	stw	r7,0(r6)
 384:	003ff906 	br	36c <_gp+0xffff7aa4>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 388:	00006ec0 	call	6ec <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 38c:	dfc00017 	ldw	ra,0(sp)
 390:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 394:	00006f81 	jmpi	6f8 <alt_icache_flush_all>
 398:	00c00034 	movhi	r3,0
 39c:	18c21c04 	addi	r3,r3,2160
 3a0:	00bfff04 	movi	r2,-4
 3a4:	1907c83a 	sub	r3,r3,r4
 3a8:	1886703a 	and	r3,r3,r2

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 3ac:	0005883a 	mov	r2,zero
  {
    while( to != end )
 3b0:	10fff526 	beq	r2,r3,388 <_gp+0xffff7ac0>
 3b4:	114f883a 	add	r7,r2,r5
    {
      *to++ = *from++;
 3b8:	39c00017 	ldw	r7,0(r7)
 3bc:	110d883a 	add	r6,r2,r4
 3c0:	10800104 	addi	r2,r2,4
 3c4:	31c00015 	stw	r7,0(r6)
 3c8:	003ff906 	br	3b0 <_gp+0xffff7ae8>

000003cc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 3cc:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 3d0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 3d4:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 3d8:	00005b00 	call	5b0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 3dc:	00005d00 	call	5d0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 3e0:	d1202617 	ldw	r4,-32616(gp)
 3e4:	d1602517 	ldw	r5,-32620(gp)
 3e8:	d1a02417 	ldw	r6,-32624(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 3ec:	dfc00017 	ldw	ra,0(sp)
 3f0:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 3f4:	00000bc1 	jmpi	bc <main>

000003f8 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 3f8:	defff204 	addi	sp,sp,-56
 3fc:	dfc00a15 	stw	ra,40(sp)
 400:	df000915 	stw	fp,36(sp)
 404:	ddc00815 	stw	r23,32(sp)
 408:	dd800715 	stw	r22,28(sp)
 40c:	dd400615 	stw	r21,24(sp)
 410:	dd000515 	stw	r20,20(sp)
 414:	dcc00415 	stw	r19,16(sp)
 418:	dc800315 	stw	r18,12(sp)
 41c:	dc400215 	stw	r17,8(sp)
 420:	dc000115 	stw	r16,4(sp)
 424:	d9400b15 	stw	r5,44(sp)
 428:	d9800c15 	stw	r6,48(sp)
 42c:	d9c00d15 	stw	r7,52(sp)
    w = fmt;
    while ((c = *w++) != 0)
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 430:	04000944 	movi	r16,37
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 434:	2005883a 	mov	r2,r4
	va_list args;
	va_start(args, fmt);
 438:	dd400b04 	addi	r21,sp,44
                if (c == '%')
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
 43c:	048018c4 	movi	r18,99
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
                }
                else if (c == 'x')
 440:	04c01e04 	movi	r19,120
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 444:	05001cc4 	movi	r20,115
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 448:	11000007 	ldb	r4,0(r2)
 44c:	20003926 	beq	r4,zero,534 <alt_printf+0x13c>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 450:	24000226 	beq	r4,r16,45c <alt_printf+0x64>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 454:	14400044 	addi	r17,r2,1
 458:	00001106 	br	4a0 <alt_printf+0xa8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 45c:	14400084 	addi	r17,r2,2
 460:	10800047 	ldb	r2,1(r2)
 464:	10003326 	beq	r2,zero,534 <alt_printf+0x13c>
            {
                if (c == '%')
 468:	1400021e 	bne	r2,r16,474 <alt_printf+0x7c>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 46c:	8009883a 	mov	r4,r16
 470:	00000b06 	br	4a0 <alt_printf+0xa8>
                } 
                else if (c == 'c')
 474:	1480051e 	bne	r2,r18,48c <alt_printf+0x94>
                {
                    int v = va_arg(args, int);
                    alt_putchar(v);
 478:	a9000017 	ldw	r4,0(r21)
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
 47c:	ad800104 	addi	r22,r21,4
 480:	b02b883a 	mov	r21,r22
                    alt_putchar(v);
 484:	00005640 	call	564 <alt_putchar>
 488:	00002806 	br	52c <alt_printf+0x134>
                }
                else if (c == 'x')
 48c:	14c01f1e 	bne	r2,r19,50c <alt_printf+0x114>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 490:	adc00017 	ldw	r23,0(r21)
 494:	ad400104 	addi	r21,r21,4
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 498:	b800031e 	bne	r23,zero,4a8 <alt_printf+0xb0>
                    {
                        alt_putchar('0');
 49c:	01000c04 	movi	r4,48
 4a0:	00005640 	call	564 <alt_putchar>
                        continue;
 4a4:	00002106 	br	52c <alt_printf+0x134>
 4a8:	05800704 	movi	r22,28
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 4ac:	00c003c4 	movi	r3,15
 4b0:	1d84983a 	sll	r2,r3,r22
 4b4:	15c4703a 	and	r2,r2,r23
 4b8:	1000021e 	bne	r2,zero,4c4 <alt_printf+0xcc>
                        digit_shift -= 4;
 4bc:	b5bfff04 	addi	r22,r22,-4
 4c0:	003ffb06 	br	4b0 <_gp+0xffff7be8>

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 4c4:	070003c4 	movi	fp,15
                        if (digit <= 9)
 4c8:	00c00244 	movi	r3,9
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 4cc:	b0001716 	blt	r22,zero,52c <alt_printf+0x134>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 4d0:	e584983a 	sll	r2,fp,r22
 4d4:	15c4703a 	and	r2,r2,r23
 4d8:	1584d83a 	srl	r2,r2,r22
                        if (digit <= 9)
 4dc:	18800236 	bltu	r3,r2,4e8 <alt_printf+0xf0>
                            c = '0' + digit;
 4e0:	11000c04 	addi	r4,r2,48
 4e4:	00000106 	br	4ec <alt_printf+0xf4>
                        else
                            c = 'a' + digit - 10;
 4e8:	110015c4 	addi	r4,r2,87
                        alt_putchar(c);
 4ec:	21003fcc 	andi	r4,r4,255
 4f0:	2100201c 	xori	r4,r4,128
 4f4:	213fe004 	addi	r4,r4,-128
 4f8:	d8c00015 	stw	r3,0(sp)
 4fc:	00005640 	call	564 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 500:	b5bfff04 	addi	r22,r22,-4
 504:	d8c00017 	ldw	r3,0(sp)
 508:	003ff006 	br	4cc <_gp+0xffff7c04>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 50c:	1500071e 	bne	r2,r20,52c <alt_printf+0x134>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 510:	ad800017 	ldw	r22,0(r21)
 514:	ad400104 	addi	r21,r21,4

                    while(*s)
 518:	b1000007 	ldb	r4,0(r22)
 51c:	20000326 	beq	r4,zero,52c <alt_printf+0x134>
                      alt_putchar(*s++);
 520:	b5800044 	addi	r22,r22,1
 524:	00005640 	call	564 <alt_putchar>
 528:	003ffb06 	br	518 <_gp+0xffff7c50>
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
                } 
                else if (c == 'c')
                {
                    int v = va_arg(args, int);
 52c:	8805883a 	mov	r2,r17
 530:	003fc506 	br	448 <_gp+0xffff7b80>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 534:	dfc00a17 	ldw	ra,40(sp)
 538:	df000917 	ldw	fp,36(sp)
 53c:	ddc00817 	ldw	r23,32(sp)
 540:	dd800717 	ldw	r22,28(sp)
 544:	dd400617 	ldw	r21,24(sp)
 548:	dd000517 	ldw	r20,20(sp)
 54c:	dcc00417 	ldw	r19,16(sp)
 550:	dc800317 	ldw	r18,12(sp)
 554:	dc400217 	ldw	r17,8(sp)
 558:	dc000117 	ldw	r16,4(sp)
 55c:	dec00e04 	addi	sp,sp,56
 560:	f800283a 	ret

00000564 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 564:	defffd04 	addi	sp,sp,-12
 568:	dc000115 	stw	r16,4(sp)
	char        c1 = (char)(c & 0xff);
    return write(STDOUT_FILENO,&c1,1);
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);
 56c:	d9000005 	stb	r4,0(sp)
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 570:	2021883a 	mov	r16,r4
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
 574:	01000034 	movhi	r4,0
 578:	21023204 	addi	r4,r4,2248
 57c:	d80b883a 	mov	r5,sp
 580:	01800044 	movi	r6,1
 584:	000f883a 	mov	r7,zero
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 588:	dfc00215 	stw	ra,8(sp)
#else
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    char        c1 = (char)(c & 0xff);

    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
 58c:	00006300 	call	630 <altera_avalon_jtag_uart_write>
 590:	00ffffc4 	movi	r3,-1
 594:	10c00126 	beq	r2,r3,59c <alt_putchar+0x38>
        return -1;
    }
    return c;
 598:	8005883a 	mov	r2,r16
#else
    return putchar(c);
#endif
#endif
}
 59c:	dfc00217 	ldw	ra,8(sp)
 5a0:	dc000117 	ldw	r16,4(sp)
 5a4:	dec00304 	addi	sp,sp,12
 5a8:	f800283a 	ret

000005ac <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
 5ac:	00006641 	jmpi	664 <alt_busy_sleep>

000005b0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 5b0:	deffff04 	addi	sp,sp,-4
 5b4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
 5b8:	00006fc0 	call	6fc <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 5bc:	00800044 	movi	r2,1
 5c0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 5c4:	dfc00017 	ldw	ra,0(sp)
 5c8:	dec00104 	addi	sp,sp,4
 5cc:	f800283a 	ret

000005d0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 5d0:	f800283a 	ret

000005d4 <altera_avalon_jtag_uart_read>:

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
  unsigned int base = sp->base;
 5d4:	21000017 	ldw	r4,0(r4)

  char * ptr = buffer;
  char * end = buffer + space;
 5d8:	298d883a 	add	r6,r5,r6

  while (ptr < end)
 5dc:	2805883a 	mov	r2,r5

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
 5e0:	3a10000c 	andi	r8,r7,16384
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 5e4:	11800b2e 	bgeu	r2,r6,614 <altera_avalon_jtag_uart_read+0x40>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 5e8:	20c00037 	ldwio	r3,0(r4)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 5ec:	1a60000c 	andi	r9,r3,32768
 5f0:	48000326 	beq	r9,zero,600 <altera_avalon_jtag_uart_read+0x2c>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 5f4:	10c00005 	stb	r3,0(r2)
 5f8:	10800044 	addi	r2,r2,1
 5fc:	003ff906 	br	5e4 <_gp+0xffff7d1c>
    else if (ptr != buffer)
 600:	11400226 	beq	r2,r5,60c <altera_avalon_jtag_uart_read+0x38>
      break;   
    
  }

  if (ptr != buffer)
    return ptr - buffer;
 604:	1145c83a 	sub	r2,r2,r5
 608:	f800283a 	ret

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    else if(flags & O_NONBLOCK)
 60c:	403ff526 	beq	r8,zero,5e4 <_gp+0xffff7d1c>
 610:	00000106 	br	618 <altera_avalon_jtag_uart_read+0x44>
      break;   
    
  }

  if (ptr != buffer)
 614:	117ffb1e 	bne	r2,r5,604 <_gp+0xffff7d3c>
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
 618:	39d0000c 	andi	r7,r7,16384
 61c:	3800021e 	bne	r7,zero,628 <altera_avalon_jtag_uart_read+0x54>
    return -EWOULDBLOCK;
  else
    return -EIO;
 620:	00bffec4 	movi	r2,-5
 624:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
 628:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
 62c:	f800283a 	ret

00000630 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
 630:	21000017 	ldw	r4,0(r4)
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 634:	3005883a 	mov	r2,r6
  unsigned int base = sp->base;

  const char * end = ptr + count;
 638:	298d883a 	add	r6,r5,r6

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 63c:	21c00104 	addi	r7,r4,4
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 640:	2980072e 	bgeu	r5,r6,660 <altera_avalon_jtag_uart_write+0x30>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 644:	38c00037 	ldwio	r3,0(r7)
 648:	18ffffec 	andhi	r3,r3,65535
 64c:	183ffc26 	beq	r3,zero,640 <_gp+0xffff7d78>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 650:	28c00007 	ldb	r3,0(r5)
 654:	20c00035 	stwio	r3,0(r4)
 658:	29400044 	addi	r5,r5,1
 65c:	003ff806 	br	640 <_gp+0xffff7d78>

  return count;
}
 660:	f800283a 	ret

00000664 <alt_busy_sleep>:
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 664:	014666b4 	movhi	r5,6554
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 668:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 66c:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 670:	dc000015 	stw	r16,0(sp)
 674:	dfc00115 	stw	ra,4(sp)
 678:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 67c:	00008200 	call	820 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 680:	10001026 	beq	r2,zero,6c4 <alt_busy_sleep+0x60>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 684:	01600034 	movhi	r5,32768
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 688:	013999b4 	movhi	r4,58982
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 68c:	0007883a 	mov	r3,zero
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 690:	297fffc4 	addi	r5,r5,-1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 694:	211999c4 	addi	r4,r4,26215
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 698:	297fffc4 	addi	r5,r5,-1
 69c:	283ffe1e 	bne	r5,zero,698 <_gp+0xffff7dd0>
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 6a0:	18c00044 	addi	r3,r3,1
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 6a4:	8121883a 	add	r16,r16,r4
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 6a8:	18bffb16 	blt	r3,r2,698 <_gp+0xffff7dd0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 6ac:	8009883a 	mov	r4,r16
 6b0:	01400144 	movi	r5,5
 6b4:	00008300 	call	830 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 6b8:	10bfffc4 	addi	r2,r2,-1
 6bc:	103ffe1e 	bne	r2,zero,6b8 <_gp+0xffff7df0>
 6c0:	00000506 	br	6d8 <alt_busy_sleep+0x74>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 6c4:	8009883a 	mov	r4,r16
 6c8:	01400144 	movi	r5,5
 6cc:	00008300 	call	830 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 6d0:	10bfffc4 	addi	r2,r2,-1
 6d4:	00bffe16 	blt	zero,r2,6d0 <_gp+0xffff7e08>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
 6d8:	0005883a 	mov	r2,zero
 6dc:	dfc00117 	ldw	ra,4(sp)
 6e0:	dc000017 	ldw	r16,0(sp)
 6e4:	dec00204 	addi	sp,sp,8
 6e8:	f800283a 	ret

000006ec <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 6ec:	f800283a 	ret

000006f0 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
 6f0:	3005883a 	mov	r2,r6
 6f4:	f800283a 	ret

000006f8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 6f8:	f800283a 	ret

000006fc <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
 6fc:	000170fa 	wrctl	ienable,zero
 700:	f800283a 	ret

00000704 <udivmodsi4>:
 704:	2900182e 	bgeu	r5,r4,768 <udivmodsi4+0x64>
 708:	28001716 	blt	r5,zero,768 <udivmodsi4+0x64>
 70c:	00800804 	movi	r2,32
 710:	00c00044 	movi	r3,1
 714:	00000206 	br	720 <udivmodsi4+0x1c>
 718:	10001126 	beq	r2,zero,760 <udivmodsi4+0x5c>
 71c:	28000516 	blt	r5,zero,734 <udivmodsi4+0x30>
 720:	294b883a 	add	r5,r5,r5
 724:	10bfffc4 	addi	r2,r2,-1
 728:	18c7883a 	add	r3,r3,r3
 72c:	293ffa36 	bltu	r5,r4,718 <_gp+0xffff7e50>
 730:	18000b26 	beq	r3,zero,760 <udivmodsi4+0x5c>
 734:	0005883a 	mov	r2,zero
 738:	21400236 	bltu	r4,r5,744 <udivmodsi4+0x40>
 73c:	2149c83a 	sub	r4,r4,r5
 740:	10c4b03a 	or	r2,r2,r3
 744:	1806d07a 	srli	r3,r3,1
 748:	280ad07a 	srli	r5,r5,1
 74c:	183ffa1e 	bne	r3,zero,738 <_gp+0xffff7e70>
 750:	3000011e 	bne	r6,zero,758 <udivmodsi4+0x54>
 754:	f800283a 	ret
 758:	2005883a 	mov	r2,r4
 75c:	f800283a 	ret
 760:	0005883a 	mov	r2,zero
 764:	003ffa06 	br	750 <_gp+0xffff7e88>
 768:	00c00044 	movi	r3,1
 76c:	003ff106 	br	734 <_gp+0xffff7e6c>

00000770 <__divsi3>:
 770:	defffe04 	addi	sp,sp,-8
 774:	dfc00115 	stw	ra,4(sp)
 778:	dc000015 	stw	r16,0(sp)
 77c:	20000b16 	blt	r4,zero,7ac <__divsi3+0x3c>
 780:	0021883a 	mov	r16,zero
 784:	28000c16 	blt	r5,zero,7b8 <__divsi3+0x48>
 788:	000d883a 	mov	r6,zero
 78c:	00007040 	call	704 <udivmodsi4>
 790:	0407c83a 	sub	r3,zero,r16
 794:	1884f03a 	xor	r2,r3,r2
 798:	1405883a 	add	r2,r2,r16
 79c:	dfc00117 	ldw	ra,4(sp)
 7a0:	dc000017 	ldw	r16,0(sp)
 7a4:	dec00204 	addi	sp,sp,8
 7a8:	f800283a 	ret
 7ac:	0109c83a 	sub	r4,zero,r4
 7b0:	04000044 	movi	r16,1
 7b4:	283ff40e 	bge	r5,zero,788 <_gp+0xffff7ec0>
 7b8:	014bc83a 	sub	r5,zero,r5
 7bc:	8400005c 	xori	r16,r16,1
 7c0:	003ff106 	br	788 <_gp+0xffff7ec0>

000007c4 <__modsi3>:
 7c4:	defffd04 	addi	sp,sp,-12
 7c8:	dfc00215 	stw	ra,8(sp)
 7cc:	dc400115 	stw	r17,4(sp)
 7d0:	dc000015 	stw	r16,0(sp)
 7d4:	20000c16 	blt	r4,zero,808 <__modsi3+0x44>
 7d8:	0023883a 	mov	r17,zero
 7dc:	0021883a 	mov	r16,zero
 7e0:	28000d16 	blt	r5,zero,818 <__modsi3+0x54>
 7e4:	01800044 	movi	r6,1
 7e8:	00007040 	call	704 <udivmodsi4>
 7ec:	1404f03a 	xor	r2,r2,r16
 7f0:	8885883a 	add	r2,r17,r2
 7f4:	dfc00217 	ldw	ra,8(sp)
 7f8:	dc400117 	ldw	r17,4(sp)
 7fc:	dc000017 	ldw	r16,0(sp)
 800:	dec00304 	addi	sp,sp,12
 804:	f800283a 	ret
 808:	0109c83a 	sub	r4,zero,r4
 80c:	04400044 	movi	r17,1
 810:	043fffc4 	movi	r16,-1
 814:	283ff30e 	bge	r5,zero,7e4 <_gp+0xffff7f1c>
 818:	014bc83a 	sub	r5,zero,r5
 81c:	003ff106 	br	7e4 <_gp+0xffff7f1c>

00000820 <__udivsi3>:
 820:	000d883a 	mov	r6,zero
 824:	00007041 	jmpi	704 <udivmodsi4>

00000828 <__umodsi3>:
 828:	01800044 	movi	r6,1
 82c:	00007041 	jmpi	704 <udivmodsi4>

00000830 <__mulsi3>:
 830:	0005883a 	mov	r2,zero
 834:	20000726 	beq	r4,zero,854 <__mulsi3+0x24>
 838:	20c0004c 	andi	r3,r4,1
 83c:	2008d07a 	srli	r4,r4,1
 840:	18000126 	beq	r3,zero,848 <__mulsi3+0x18>
 844:	1145883a 	add	r2,r2,r5
 848:	294b883a 	add	r5,r5,r5
 84c:	203ffa1e 	bne	r4,zero,838 <_gp+0xffff7f70>
 850:	f800283a 	ret
 854:	f800283a 	ret
