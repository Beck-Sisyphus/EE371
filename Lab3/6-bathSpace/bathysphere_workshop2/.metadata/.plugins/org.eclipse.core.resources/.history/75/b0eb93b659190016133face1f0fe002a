/* 
 * "Small Hello World" example. 
 * 
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example 
 * designs. It requires a STDOUT  device in your system's hardware. 
 *
 * The purpose of this example is to demonstrate the smallest possible Hello 
 * World application, using the Nios II HAL library.  The memory footprint
 * of this hosted application is ~332 bytes by default using the standard 
 * reference design.  For a more fully featured Hello World application
 * example, see the example titled "Hello World".
 *
 * The memory footprint of this example has been reduced by making the
 * following changes to the normal "Hello World" example.
 * Check in the Nios II Software Developers Manual for a more complete 
 * description.
 * 
 * In the SW Application project (small_hello_world):
 *
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 * In System Library project (small_hello_world_syslib):
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 *    - Define the preprocessor option ALT_NO_INSTRUCTION_EMULATION 
 *      This removes software exception handling, which means that you cannot 
 *      run code compiled for Nios II cpu with a hardware multiplier on a core 
 *      without a the multiply unit. Check the Nios II Software Developers 
 *      Manual for more details.
 *
 *  - In the System Library page:
 *    - Set Periodic system timer and Timestamp timer to none
 *      This prevents the automatic inclusion of the timer driver.
 *
 *    - Set Max file descriptors to 4
 *      This reduces the size of the file handle pool.
 *
 *    - Check Main function does not exit
 *    - Uncheck Clean exit (flush buffers)
 *      This removes the unneeded call to exit when main returns, since it
 *      won't.
 *
 *    - Check Don't use C++
 *      This builds without the C++ support code.
 *
 *    - Check Small C library
 *      This uses a reduced functionality C library, which lacks  
 *      support for buffering, file IO, floating point and getch(), etc. 
 *      Check the Nios II Software Developers Manual for a complete list.
 *
 *    - Check Reduced device drivers
 *      This uses reduced functionality drivers if they're available. For the
 *      standard design this means you get polled UART and JTAG UART drivers,
 *      no support for the LCD driver and you lose the ability to program 
 *      CFI compliant flash devices.
 *
 *    - Check Access device drivers directly
 *      This bypasses the device file system to access device drivers directly.
 *      This eliminates the space required for the device file system services.
 *      It also provides a HAL version of libc services that access the drivers
 *      directly, further reducing space. Only a limited number of libc
 *      functions are available in this configuration.
 *
 *    - Use ALT versions of stdio routines:
 *
 *           Function                  Description
 *        ===============  =====================================
 *        alt_printf       Only supports %s, %x, and %c ( < 1 Kbyte)
 *        alt_putstr       Smaller overhead than puts with direct drivers
 *                         Note this function doesn't add a newline.
 *        alt_putchar      Smaller overhead than putchar with direct drivers
 *        alt_getchar      Smaller overhead than getchar with direct drivers
 *
 */

#include "sys/alt_stdio.h"
//#include <stdio.h>
#include <time.h>
#include <unistd.h>

#define switches 	(volatile char *) 0x3010
#define keys		(volatile char *) 0x3000

int main()
{
	*keys = 0b1111;
	char actionSignal = "Z";


while(1){
	alt_printf("\n**  Welcome to the Interlock Management System!  **\n");
	alt_printf("\nFor bathysphere arrival, type 'A' then press enter.\n");
	alt_printf("\nFor bathysphere departure, type 'D' then press enter.\n");
	alt_printf("\nTo reset the system, please type 'R' then press enter.\n");

	actionSignal = alt_getchar();
	alt_getchar();
	if (actionSignal == 'A') {					// SW[0]
		*switches = 0b0000000001;
		alt_printf("\nBathysphere Arriving\n");
		alt_printf("\nType 'E' to check if the chamber is empty\n");
		alt_printf("%x", *switches);
		char next1 = alt_getchar();
		alt_getchar();

		if (next1 == 'E') {
			*switches = 0b0001000001;
			alt_printf("\nEmpty\n");
			alt_printf("%x", *switches);
			usleep(1000000);
			*switches = 0b0000000001;
			alt_printf("\nType 'P' to pressurize the chamber\n");
			alt_printf("%x", *switches);
			char next2 = alt_getchar();
			alt_getchar();

			if (next2 == 'P') {
				*keys = 0b1101;
				alt_printf("\nPressurizing\n");
				alt_printf("\nType 'O' and press enter to open outer port\n");
				char next3 = alt_getchar();
				alt_getchar();

				if (next3 == 'O') {
					*keys = 0b1111;
					*switches = 0b0000000101;
					alt_printf("\nOuter port opened\n");
					alt_printf("\nType 'C' to close Outer port\n");
					char next4 = alt_getchar();
					alt_getchar();

					if (next4 == 'C') {
						*switches = 0b0000000001;
						alt_printf("\nOuter port closed\n");
						alt_printf("\nType 'D' to depressurize the chamber\n");
						char next5 = alt_getchar();
						alt_getchar();

						if (next5 == 'D') {
							*keys = 0b1011;
							alt_printf("\nDepressurizing\n");
							alt_printf("\nType 'O' to open the inner port\n");
							char next6 = alt_getchar();
							alt_getchar();

							if (next6 == 'O') {
								*keys = 0b1111;
								*switches = 0b0000001001;
								alt_printf("\nInner port opened\n");
								alt_printf("\nType 'C' to close the inner port\n");
								char next7 = alt_getchar();
								alt_getchar();

								if(next7 == 'C') {
									*switches = 0b0000000001;
									alt_printf("\nInner port closed\n");
									alt_printf("\nMission Complete\n");
									usleep(1000000);
									*switches = 0b0000000000;
								}
							}
						}
					}
				}
			}
		 }
	} else if (actionSignal == 'D') {
		*switches = 0b0000000010; // SW[1]
		alt_printf("\nBathysphere Leaving\n");
		alt_printf("\nType 'E' to check if the chamber is empty\n");
		char next8 = alt_getchar();
		alt_getchar();

		if (next8 == 'E') {
			*switches = 0b0001000010;
			alt_printf("\nEmpty\n");
			usleep(1000000);
			*switches = 0b0000000010;
			alt_printf("\nType 'D' to depressurize the chamber\n");
			char next9 = alt_getchar();
			alt_getchar();

			if (next9 == 'D') {
				*keys = 0b1011;
				alt_printf("\nDepressurizing\n");
				alt_printf("\nType 'O' to open the inner port\n");
				char next10 = alt_getchar();
				alt_getchar();

				if (next10 == 'O') {
					*keys = 0b1111;
					*switches = 0b0000001010;
					alt_printf("\nInner port opened\n");
					alt_printf("\nType 'C' to close the inner port\n");
					char next11 = alt_getchar();
					alt_getchar();

					if(next11 == 'C') {
						*switches = 0b0000000010;
						alt_printf("\nInner port closed\n");
						alt_printf("Type 'P' to pressurize the chamber");
						char next12 = alt_getchar();
						alt_getchar();

						if (next12 == 'P') {
							*keys = 0b1101;
							alt_printf("\nPressurizing\n");
							alt_printf("\nType 'O' and press enter to open outer port\n");
							char next13 = alt_getchar();
							alt_getchar();

							if (next13 == 'O') {
								*keys = 0b1111;
								*switches = 0b0000000110;
								alt_printf("\nOuter port opened\n");
								alt_printf("\nType 'C' to close Outer port\n");
								char next14 = alt_getchar();
								alt_getchar();

								if (next14 == 'C') {
									*switches = 0b0000000010;
									alt_printf("\nOuter port closed\n");
									alt_printf("\nType 'D' to depressurize the chamber\n");
									char next15 = alt_getchar();
									alt_getchar();

									if (next15 == 'D') {
										*keys = 0b1011;
										alt_printf("\nDepressurizing\n");
										alt_printf("\nType 'O' to open the inner port\n");
										char next16 = alt_getchar();
										alt_getchar();

										if (next16 == 'O') {
											*keys = 0b1111;
											*switches = 0b0000001010;
											alt_printf("\nInner port opened\n");
											alt_printf("\nType 'C' to close the inner port\n");
											char next17 = alt_getchar();
											alt_getchar();

											if(next17 == 'C') {
												*switches = 0b0000000010;
												alt_printf("\nInner port closed\n");
												alt_printf("\nMission Complete\n");
												usleep(1000000);
												*switches = 0b0000000000;
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
	if (actionSignal == 'R') {
		*keys = 0b1110; 		// ~KEY[0]
		alt_printf("\nSYSTEM RESET\n");
	}

	return 0;
}
