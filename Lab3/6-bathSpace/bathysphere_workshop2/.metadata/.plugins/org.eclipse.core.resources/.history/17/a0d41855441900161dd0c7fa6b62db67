/* 
 * "Small Hello World" example. 
 * 
 * This example prints 'Hello from Nios II' to the STDOUT stream. It runs on
 * the Nios II 'standard', 'full_featured', 'fast', and 'low_cost' example 
 * designs. It requires a STDOUT  device in your system's hardware. 
 *
 * The purpose of this example is to demonstrate the smallest possible Hello 
 * World application, using the Nios II HAL library.  The memory footprint
 * of this hosted application is ~332 bytes by default using the standard 
 * reference design.  For a more fully featured Hello World application
 * example, see the example titled "Hello World".
 *
 * The memory footprint of this example has been reduced by making the
 * following changes to the normal "Hello World" example.
 * Check in the Nios II Software Developers Manual for a more complete 
 * description.
 * 
 * In the SW Application project (small_hello_world):
 *
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 * In System Library project (small_hello_world_syslib):
 *  - In the C/C++ Build page
 * 
 *    - Set the Optimization Level to -Os
 * 
 *    - Define the preprocessor option ALT_NO_INSTRUCTION_EMULATION 
 *      This removes software exception handling, which means that you cannot 
 *      run code compiled for Nios II cpu with a hardware multiplier on a core 
 *      without a the multiply unit. Check the Nios II Software Developers 
 *      Manual for more details.
 *
 *  - In the System Library page:
 *    - Set Periodic system timer and Timestamp timer to none
 *      This prevents the automatic inclusion of the timer driver.
 *
 *    - Set Max file descriptors to 4
 *      This reduces the size of the file handle pool.
 *
 *    - Check Main function does not exit
 *    - Uncheck Clean exit (flush buffers)
 *      This removes the unneeded call to exit when main returns, since it
 *      won't.
 *
 *    - Check Don't use C++
 *      This builds without the C++ support code.
 *
 *    - Check Small C library
 *      This uses a reduced functionality C library, which lacks  
 *      support for buffering, file IO, floating point and getch(), etc. 
 *      Check the Nios II Software Developers Manual for a complete list.
 *
 *    - Check Reduced device drivers
 *      This uses reduced functionality drivers if they're available. For the
 *      standard design this means you get polled UART and JTAG UART drivers,
 *      no support for the LCD driver and you lose the ability to program 
 *      CFI compliant flash devices.
 *
 *    - Check Access device drivers directly
 *      This bypasses the device file system to access device drivers directly.
 *      This eliminates the space required for the device file system services.
 *      It also provides a HAL version of libc services that access the drivers
 *      directly, further reducing space. Only a limited number of libc
 *      functions are available in this configuration.
 *
 *    - Use ALT versions of stdio routines:
 *
 *           Function                  Description
 *        ===============  =====================================
 *        alt_printf       Only supports %s, %x, and %c ( < 1 Kbyte)
 *        alt_putstr       Smaller overhead than puts with direct drivers
 *                         Note this function doesn't add a newline.
 *        alt_putchar      Smaller overhead than putchar with direct drivers
 *        alt_getchar      Smaller overhead than getchar with direct drivers
 *
 */

#include "sys/alt_stdio.h"
#include <time.h>
#include <unistd.h>

#define switches 	(volatile char *) 0x3010
#define keys		(volatile char *) 0x3000

int main()
{
	char actionSignal;
	alt_printf("\n**  Welcome to the Interlock Management System!  **\n");
	alt_printf("\nFor bathysphere arrival, type 'A' then press enter.\n");
	alt_printf("\nFor bathysphere departure, type 'D' then press enter.\n");
	alt_printf("\nTo reset the system, please type 'R' then press enter.\n");

	while(1) {

		actionSignal = alt_getchar();
		while(actionSignal != '\n' && actionSignal != EOF) {
			actionSignal = alt_getchar();
		}

		if (actionSignal == 'A') {					// SW[0]
			*switches = *switches | 0x0000000001;
			alt_printf("\nBathysphere Arriving\n");
			alt_printf("\nType 'E' to check if the chamber is empty\n");
			usleep(100000);
			char next1 = alt_getchar();
			while(next1 != '\n' && next1 != EOF) {
				next1 = alt_getchar();
			}
	//		alt_printf("%s", next1);
			if (next1 == 'E') {
				*switches = *switches | 0x1000000000;
				alt_printf("\nEmpty\n");
				*switches = *switches & 0x0111111111;
				alt_printf("\nType 'P' to pressurize the chamber\n");
				usleep(100000);
				char next2 = alt_getchar();
				while(next2 != '\n' && next2 != EOF) {
					next2 = alt_getchar();
				}

				if (next2 == 'P') {
					*keys = *keys & 1101;
					alt_printf("\nPressurizing\n");
					alt_printf("\nType 'O' and press enter to open outer port\n");
					usleep(100000);
					char next3 = alt_getchar();
					while(next3 != '\n' && next3 != EOF) {
						next3 = alt_getchar();
					}
					if (next3 == 'O') {
						*switches = *switches | 0x0000000100;
						alt_printf("\nOuter port opened\n");
						alt_printf("\nType 'C' to close Outer port\n");
						usleep(100000);
						char next4 = alt_getchar();
						while(next4 != '\n' && next4 != EOF) {
							next4 = alt_getchar();
						}

						if (next4 == 'C') {
							*switches = *switches & 0x1111111011;
							alt_printf("\nOuter port closed\n");
							alt_printf("\nType 'D' to depressurize the chamber\n");
							usleep(100000);
							char next5 = alt_getchar();
							while(next5 != '\n' && next5 != EOF) {
								next5 = alt_getchar();
							}
							if (next5 == 'D') {
								*keys = *keys & 0x1011;
								alt_printf("\nDepressurizing\n");
								alt_printf("\nType 'O' to open the inner port\n");
								usleep(100000);
								char next6 = alt_getchar();
								while(next6 != '\n' && next6 != EOF) {
									next6 = alt_getchar();
								}
								if (next6 == 'O') {
									*switches = *switches | 0x0000001000;
									alt_printf("\nInner port opened\n");
									alt_printf("\nType 'C' to close the inner port\n");
									usleep(100000);
									char next7 = alt_getchar();
									if(next7 == 'C') {
										*switches = *switches & 0x1111110111;
										alt_printf("\nInner port closed\n");
										alt_printf("\nMission Complete\n");
										*switches = *switches & 0x1111111110;
										usleep(100000);
									}
								}
							}
						}
					}
				}
			 }
		} else if (actionSignal == 'D') {
			*switches = *switches | 0000000010; // SW[1]
			alt_printf("\nBathysphere Leaving\n");
			alt_printf("\nType 'E' to check if the chamber is empty\n");
			char next8 = alt_getchar();
			if (next8 == 'E') {
				*switches = *switches | 1000000000;
				alt_printf("\nEmpty\n");
				*switches = *switches & 0111111111;
				alt_printf("\nType 'D' to depressurize the chamber\n");
				char next9 = alt_getchar();
				if (next9 == 'D') {
					*keys = *keys & 1011;
					alt_printf("\nDepressurizing\n");
					alt_printf("\nType 'O' to open the inner port\n");
					char next10 = alt_getchar();
					if (next10 == 'O') {
						*switches = *switches | 0000001000;
						alt_printf("\nInner port opened\n");
						alt_printf("\nType 'C' to close the inner port\n");
						char next11 = alt_getchar();
						if(next11 == 'C') {
							*switches = *switches & 1111110111;
							alt_printf("\nInner port closed\n");
							alt_printf("Type 'P' to pressurize the chamber");
							char next12 = alt_getchar();
							if (next12 == 'P') {
								*keys = *keys & 1101;
								alt_printf("\nPressurizing\n");
								alt_printf("\nType 'O' and press enter to open outer port\n");
								char next13 = alt_getchar();
								if (next13 == 'O') {
									*switches = *switches | 0000000100;
									alt_printf("\nOuter port opened\n");
									alt_printf("\nType 'C' to close Outer port\n");
									char next14 = alt_getchar();
									if (next14 == 'C') {
										*switches = *switches & 1111111011;
										alt_printf("\nOuter port closed\n");
										alt_printf("\nType 'D' to depressurize the chamber\n");
										char next15 = alt_getchar();
										if (next15 == 'D') {
											*keys = *keys & 1011;
											alt_printf("\nDepressurizing\n");
											alt_printf("\nType 'O' to open the inner port\n");
											char next16 = alt_getchar();
											if (next16 == 'O') {
												*switches = *switches | 0000001000;
												alt_printf("\nInner port opened\n");
												alt_printf("\nType 'C' to close the inner port\n");
												char next17 = alt_getchar();
												if(next17 == 'C') {
													*switches = *switches & 1111110111;
													alt_printf("\nInner port closed\n");
													alt_printf("\nMission Complete\n");
													*switches = *switches & 1011;
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		} else if (actionSignal == 'R') {
			*keys = *keys & 1110; 		// ~KEY[0]
			alt_printf("\nSYSTEM RESET\n");
		}
	}
	return 0;
}
